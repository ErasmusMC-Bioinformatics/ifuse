<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class ifuseloader {
    private $CI        = null;
    private $fileName  = null;
    private $data      = null;
    private $error     = array(false,null);
    private $organized = false;
    private $sort      = array();
    
    /**
    * put your comment there...
    * 
    */
    public function __construct($args) {
        $this->CI       =& get_instance();
        $this->CI->load->library('sequenceloader');
        $this->error    =  self::load($args["fileName"]);
    }
    
    /**
    * put your comment there...
    * 
    */
    public function __destruct() {}
    
    /**
    * put your comment there...
    * 
    */
    public function reset() {
        self::load($this->fileName);
    }
    
    /**
    * put your comment there...
    * 
    * @param string $fileName
    */
    public function load($fileName) {
        $this->fileName = isset($fileName) ? $fileName : '' ;
        
        if (file_exists($this->fileName) && is_file($this->fileName)) {
            $this->data = file_get_contents($this->fileName, FILE_USE_INCLUDE_PATH);
            $this->CI->load->library("iFuseFileValidator");
            
            $options = preg_split("/;/", $this->CI->userfiles->getConfig('FILES['.$this->CI->userfiles->getConfig("CURRENT_FILE").'][OPTIONS]'));
            for ($i = 0; $i < sizeof($options); $i++) {
                $tmp = preg_split("/:/", $options[$i],2);
                unset($options[$i]);
                if (is_array($tmp) && (sizeof($tmp) > 0) && isset($tmp[1])) {
                    $options[$tmp[0]] = $tmp[1];
                }
            }
            
            
            $error = $this->CI->ifusefilevalidator->setOption('hasHeader', (isset($options['header']) ? $options['header'] : "true"));
            
            $error = $this->CI->ifusefilevalidator->validate($this->data, null, $this->data, $messages);
            
            return(array($error,$messages));
        } else {
            $this->data = null;
        }
    }
    
    
    
    /**
    * put your comment there...
    * 
    */
    public function &getData($loadsequence=false) {
        if ($loadsequence !== true) {
            $this->CI->sequenceloader->concat_sequences($this->data);
        }
        return $this->data;
    }
    
    /**
    * put your comment there...
    * 
    */
    public function getError() {
        return $this->error;
    }
    
    /**
    * put your comment there...
    * 
    * @param array $data
    */
    public function organize(&$data) {
        if (!$this->organized) {
            $url = preg_split("/[\/\\\]/",$this->CI->uri->uri_string());
            
            if (is_array($url) && is_array($data) && (sizeof($url) > 0)) {
                for ($i = 0; $i < sizeof($url); $i++) {
                    $segment = preg_split("/:/",$url[$i],2);
                    $type    = array_shift($segment);
                    $segment = preg_split("/&/",array_shift($segment));
                    $length  = sizeof($segment);
                    
                    for ($j = 0; (is_array($segment) && ($j < $length)); $j++) {
                        $tmp = preg_split("/=/",$segment[$j],2);
                        if (isset($segment[$tmp[0]])) {
                            $segment[$tmp[0]] = (isset($tmp[1])? (is_array($segment[$tmp[0]]) ? array_merge($segment[$tmp[0]], array($tmp[1])) : array($segment[$tmp[0]], $tmp[1])) : $tmp[1]);
                        } else {
                            $segment[$tmp[0]] = (isset($tmp[1]) ? $tmp[1] : null);
                        }
                        unset($segment[$j]);
                    }
                    
                    
                    $columns = array_keys($segment);



/* column Fusion.Gene does not work!! fixed only->not*/



                    if ((strtolower($type) == "not"  )  || 
                        (strtolower($type) == "only" )) {
                        $tmp = array();
                        
                        for ($j = 0; $j < sizeof($data); $j++) {
                            for ($k = 0; $k < sizeof($columns); $k++) {
                                if (!is_array($segment[$columns[$k]])) {
                                    if (isset($data[$j][$columns[$k]]) && (
                                         (strtolower($type) == "not" ) && ($data[$j][$columns[$k]] != $segment[$columns[$k]]) || 
                                         (strtolower($type) == "only") && ($data[$j][$columns[$k]] == $segment[$columns[$k]])
                                     )) {
                                        $tmp[] = $data[$j];
                                    }
                                } else {
                                    $add = true;
                                    for ($l=0; $l<sizeof($segment[$columns[$k]]); $l++) {
                                        if (isset($data[$j][$columns[$k]]) && (
                                            (strtolower($type) == "not" ) && ($data[$j][$columns[$k]] != $segment[$columns[$k]][$l]) || 
                                            (strtolower($type) == "only") && ($data[$j][$columns[$k]] == $segment[$columns[$k]][$l])
                                        )) {
                                            // Nothing changes
                                        } else {
                                            $add = false;
                                        }
                                    }
                                    if ($add) {$tmp[] = $data[$j];}
                                }
                            }
                        }
                        
                        $data = $tmp;
                    } elseif (strtolower($type) == "sort" )  {
                        $sortorder = SORT_ASC;
                      for ($j = 0; $j < sizeof($segment); $j++) {
                          if (isset($segment[$columns[$j]])) {
                              $sortorder = ((strtolower($segment[$columns[$j]]) == 'desc') ? SORT_DESC : SORT_ASC);
                              //TODO???? (sort:...&...&... instead of sort:.../.../...) only the last /sort:... is visible eventually...
                          }
                          break;
                      }
                          
                      try {
                          self::usortByArrayKey($data,$columns,$sortorder);
                      } catch (Exception $e) {
                          $e->getMessage();
                      }
                    } elseif (strtolower($type) == "group")  {
                        //TODO: grouping
                    }
                }
            }
            $this->organized = true;
        }
        
    }
    
    // string compare function = strcmp () 
    
    
    /**
    * put your comment there...
    * // masonswolf+ignorethispart at gmail dot com
    * 
    * @param mixed $array
    * @param mixed $key
    * @param mixed $asc
    */
    private function usortByArrayKey(&$array, $key, $asc=SORT_ASC) {
        $this->sort[] = $key;

        $sort_flags = array(SORT_ASC, SORT_DESC);
        if(!in_array($asc, $sort_flags)) throw new InvalidArgumentException('sort flag only accepts SORT_ASC or SORT_DESC');
        $cmp = function(array $a, array $b) use ($key, $asc, $sort_flags) {
            if(!is_array($key)) { //just one key and sort direction
                
                if(!isset($a[$key]) || !isset($b[$key])) {
                    throw new Exception("attempting to sort on non-existent keys ($key)");
                }
                if($a[$key] == $b[$key]) return 0;
                
                return ($asc==SORT_ASC xor $a[$key] < $b[$key]) ? 1 : -1;
            } else { //using multiple keys for sort and sub-sort
                foreach($key as $sub_key => $sub_asc) {
                    //array can come as 'sort_key'=>SORT_ASC|SORT_DESC or just 'sort_key', so need to detect which
                    if(!in_array($sub_asc, $sort_flags)) { $sub_key = $sub_asc; $sub_asc = $asc; }
                    //just like above, except 'continue' in place of return 0
                    if(!isset($a[$sub_key]) || !isset($b[$sub_key])) {
                        throw new Exception("attempting to sort on non-existent keys ($sub_key)");
                    }
                    if($a[$sub_key] == $b[$sub_key]) continue;
                    
                    return ($sub_asc==SORT_ASC xor $a[$sub_key] < $b[$sub_key]) ? 1 : -1;
                }
                return 0;
            }
        };
        usort($array, $cmp);
    } 
}

/* End of file tabDelimitedFile.php */
/* Location: ./application/libraries/tabDelimitedFile.php */
